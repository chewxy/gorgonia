on: [pull_request]
name: Build
env:
  GOPROXY: "https://proxy.golang.org"
jobs:
  set-cache:
    strategy:
      matrix:
        os: ["ubuntu-latest"]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Install Go 
      uses: actions/setup-go@v2
      with:
        go-version: '^1.15' # The Go version to download (if necessary) and use.
    # Get values for cache paths to be used in later steps
    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - name: Checkout
      uses: actions/checkout@v2
    # Cache go build cache, used to speedup go test
    - name: Go Build Cache
      id: build-cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-build- 
    # Cache go mod cache, used to speedup builds
    - name: Go Mod Cache
      id: build-mod-cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-mod- 
    - name: Install Dependencies
      if: steps.build-mod-cache.outputs.cache-hit != 'true'
      run: |
        GOARCH=arm GOOS=linux go get -t .
        GOARCH=amd64 GOOS=linux go get -t .
        GOARCH=amd64 GOOS=darwin go get -t .
  build:
    strategy:
      matrix:
        go: [1.14.x, 1.15.x]
        goos: [linux, darwin]
        goarch: [amd64, arm]
        exclude:
          # windows/386 and darwin/386 seems useless
          - goarch: "arm"
            goos: darwin
    runs-on: ubuntu-latest
    needs: set-cache
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Go ${{ matrix.go }}
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go }}
    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - name: Checkout
      uses: actions/checkout@v2
    # Cache go build cache, used to speedup go test
    - name: Go Mod Cache
      id: build-mod-cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-mod- 
    - name: build
      run: |
        go env
        go build .
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
